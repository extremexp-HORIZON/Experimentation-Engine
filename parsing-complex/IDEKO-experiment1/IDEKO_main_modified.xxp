package IDEKO;

workflow IDEKO_main {

  define task ReadData;
  define task PrepareData;
  define task TrainModel;
  define task EvaluateModel;

  // Task CONNECTIONS
  START -> ReadData -> PrepareData -> TrainModel -> EvaluateModel -> END;

  configure task ReadData {
    
    define input data ExternalDataFile;
    define output data X;
    define output data Y;
    define output data IndicatorList;
    
    implementation "IDEKO-task-library/ReadIDEKOData/task.py"
  }

  configure task PrepareData {
    
    
    START -> AddPadding -> SplitData -> END;
    
    
    
    // DATA
    define input data X;
    define input data Y;
    define input data IndicatorList;
    define output data FeaturesTrain;
    define output data FeaturesTest;
    define output data LabelsTrain;
    define output data LabelsTest;
    
    // DATA CONNECTIONS
    X --> AddPadding.X;
    Y --> AddPadding.Y;
    IndicatorList --> AddPadding.IndicatorList;
    AddPadding.XPad --> SplitData.Features;
    AddPadding.YPad --> SplitData.Labels;
    SplitData.FeaturesTrain --> FeaturesTrain;
    SplitData.FeaturesTest --> FeaturesTest;
    SplitData.LabelsTrain --> LabelsTrain;
    SplitData.LabelsTest --> LabelsTest;
    
    implementation "IDEKO-task-library.AddPaddingTask"
    implementation "extremexp-mltask-library.PrepareData.SplitData"
  }

  configure task EvaluateModel {
    
    define input data TrainedModel;
    define input data Features;
    define input data Labels;
    
    implementation "IDEKO-task-library/EvaluateModel/task.py"
  }

  // DATA
  define input data ExternalDataFile;

  // DATA CONNECTIONS
  ExternalDataFile --> ReadData.ExternalDataFile;
  ReadData.X --> PrepareData.X;
  ReadData.Y --> PrepareData.Y;
  ReadData.IndicatorList --> PrepareData.IndicatorList;
  PrepareData.XPad --> TrainModel.XPad;
  PrepareData.YPad --> TrainModel.YPad;
  PrepareData.FeaturesTrain --> TrainModel.FeaturesTrain;
  PrepareData.FeaturesTest --> TrainModel.FeaturesTest;
  PrepareData.LabelsTrain --> TrainModel.LabelsTrain;
  PrepareData.LabelsTest --> TrainModel.LabelsTest;
  TrainModel.TrainedModel --> EvaluateModel.TrainedModel;
  PrepareData.FeaturesTest --> EvaluateModel.FeaturesTest;
  PrepareData.LabelsTest --> EvaluateModel.LabelsTest;

  configure data ExternalDataFile {
    path "datasets/ideko-subset/**";
  }

}

workflow AW1 from IDEKO_main {

  configure task TrainModel {
    
    define input data XPad;
    define input data YPad;
    define input data FeaturesTrain;
    define input data LabelsTrain;
    define input data LabelsTest;
    define input data FeaturesTest;
    define output data TrainedModel;
    
    
    type Integer;
    default 90;
    range [1,200];
    
    type Integer;
    default 64;
    range [8,256];
    implementation "IDEKO-task-library/TrainModelNN/task.py"
  }

}

experiment EXP {

    intent FindBestClassifier;

    control {
        //Automated
        S1
    }

    space S1 of AW1 {
        strategy gridsearch;
        param epochs_vp = range(80,90,10);
        param batch_size_vp = enum(64);

        configure task TrainModel {

// Additional content from IDEKO-experiment1 implementations
workflow IDEKO_DataPreprocessing {

  define task AddPadding;
  define task SplitData;

  START -> AddPadding -> SplitData -> END;

  configure task AddPadding {
    implementation "IDEKO-task-library.AddPaddingTask"
  }

  configure task SplitData {
    implementation "extremexp-mltask-library.PrepareData.SplitData"
  }

  // DATA
  define input data X;
  define input data Y;
  define input data IndicatorList;
  define output data FeaturesTrain;
  define output data FeaturesTest;
  define output data LabelsTrain;
  define output data LabelsTest;

  // DATA CONNECTIONS
  X --> AddPadding.X;
  Y --> AddPadding.Y;
  IndicatorList --> AddPadding.IndicatorList;
  AddPadding.XPad --> SplitData.Features;
  AddPadding.YPad --> SplitData.Labels;
  SplitData.FeaturesTrain --> FeaturesTrain;
  SplitData.FeaturesTest --> FeaturesTest;
  SplitData.LabelsTrain --> LabelsTrain;
  SplitData.LabelsTest --> LabelsTest;

}